{
    "python_caracteristicas": "O python é uma linguagem de programação amplamente usada no mundo. Sabia que essa linguagem foi feita para ser elegante? Sim, é isso mesmo, ela existe até umas 'leis' de como usar ela. Entra nesse site e escreva: 'import this' para ver as 'leis'. \n https://www.onlinegdb.com/online_python_interpreter \nVamos citar algumas curiosidades dela, como por exemplo, ela é fortemente tipada e dinâmica. Um ponto que divide opiniões nas comunidades é a indentação que o python exige para separar e definir blocos de comandos",
    "funcao": "A sintaxe de uma função é definida por três partes: nome, parâmetros e corpo, o qual agrupa uma sequência de linhas que representa algum comportamento. No código abaixo, temos um exemplo de declaração de função em Python:\n'def hello(meu_nome):\nprint('Olá',meu_nome)'\nEssa função, de nome hello, tem como objetivo imprimir o nome que lhe é passado por parâmetro (também chamado de argumento).\nA palavra reservada def, na primeira linha, explicita a definição da função naquele ponto.\nEm seguida, entre parênteses, temos o parâmetro meu_nome. Ainda na mesma linha, observe a utilização dos dois pontos (:),\nque indicam que o código identado nas linhas abaixo faz parte da função que está sendo criada.\nPara executar a função, devemos simplesmente chamar seu nome e passar os parâmetros esperados entre parênteses,\nconforme o código a seguir.\n    >>> hello(bot_python)\n    Olá Bot oPython\n    >>> meu_nome\n    'Bot oPython'\n",
    "classe": "Classes proporcionam uma forma de organizar dados e funcionalidades juntos.\nCriar uma nova classe cria um novo “tipo” de objeto, permitindo que novas “instâncias” desse tipo sejam produzidas.\nCada instância da classe pode ter atributos anexados a ela, para manter seu estado.\nInstâncias da classe também podem ter métodos (definidos pela classe) para modificar seu estado.\nSintaxe da definição de uma Classe:\n    class ClassName:\n        <statement-1>\n        .        .        .        <statement-N>\n",
    "lista": "A lista é uma estrutura de dados que armazena elementos geralmente de mesmo tamanho e mesmo tipo.\nNos arranjos, os elementos ficam agrupados em grandes blocos na memória de forma sequencial, ou seja, o N-ésimo elemento ficará salvo na memória logo após o (N-1)-ésimo.\nEntão, para acharmos qualquer item de um array, basta que saibamos onde está o primeiro.\nNo Python temos as seguntes funções para manipular Listas:\nappend() - Adiciona um elemento no final da lista\nclear() - Remove todos os elementos da lista\ncopy()- Retorna uma cópia da lista\ncount()- Retorna o número de elementos com o valor especificado\nextend()- Adiciona os elementos de uma lista (ou qualquer iterável), ao final da lista atual\nindex() - Retorna o índice do primeiro elemento com o valor especificado\ninsert() - Adiciona um elemento na posição especificada\npop() - Remove o elemento na posição especificada\nremove() - Remove o primeiro item com o valor especificado\nreverse() - Inverte a ordem da lista\nsort() - Classifica a list\nExemplo: Append e Pop\nodd = [1, 3, 5]\nodd.append(7)\nprint(odd)\nodd.pop(2)\nprint(odd)\nResposta Esperada:[1, 3, 5, 7] # odd.append(7)\n[1, 3, 7] # o   dd.pop(2)",
    "dict": "Dicionário é um tipo diferente de coleção. Ele é um tipo de mapeamento nativo do Python. A associação, ou mapeamento, é feita a partir de uma chave, que pode ser qualquer tipo imutável, para um valor, que pode ser qualquer objeto de dados do Python.\nComo exemplo, vamos criar um dicionário para traduzir palavras em Portugues para inglês. Para este dicionário, as chaves são strings.\n    br_para_en = {'um': 'one', 'dois': 'two', 'tres': 'three'}\n    br_para_en['um'] - retorna 'one'\nTambém é possivel fazer com que uma chave numerica referencie uma string, como no exemplo:\n    br_para_en = {'4': 'four', '5': 'five', '6': 'six'}\n    br_para_en[4] - retorna 'four'",
    "tupla": "Tupla é um tipo de estrutura de dados utilizada em Python que funciona de modo semelhante a uma lista, entretanto, com a característica principal de ser imutável.\nIsso significa que quando uma tupla é criada não é possível adicionar, alterar ou remover seus elementos.\nGeralmente, ela é utilizada para adicionar tipos diferentes de informações, porém, com a quantidade de elementos definidos.\n# tupla com parênteses / declaração implícita\n>>> tupla_numeros = (10, 20, 30)\n>>> tupla_numeros\n    (10, 20, 30)\n>>> \n# tupla sem parênteses / declaração implícita\n>>> tupla_nova = 10, 20, 30\n>>> tupla_nova\n    (10, 20, 30)\nÉ importante dizer que a utilização dos parênteses não é obrigatória. No entanto, é considerada uma boa prática. O uso da vírgula é exigido, pois se ela tiver apenas um elemento, é preciso colocar uma vírgula depois dele para que o Python entenda que se trata de uma tupla.",
    "operador_comparacao": "Os operadores de comparação são usados para comparar valores, o que vai retornar True ou False, dependendo da condição.\n'>' (Maior que) - Verifica se um valor é maior que outro\n'<' (Menor que) - Verifica se um valor é menor que outro\n'==' (Igual a) - Verifica se um valor é igual a outro\n'!=' (Diferente de) - Verifica se um valor é diferente de outro\n'>=' (Maior ou igual a) - Verifica se um valor é maior ou igual a outro\n'<=' (Menor ou igual a) - Verifica se um valor é menor ou igual a outro\nExemplo:\nsoma_1 = 7 + 8\nsoma_2 = 10 + 5\nif soma_1 == soma_2:\n    print('Os resultados são iguais')\nelse:\n    print('Os resultados são diferentes')",
    "operador_logico": "Além dos operadores de comparação, existem os chamados operadores lógicos ou 'conectivos lógicos'.\nEstes, servem para conectar/combinar duas expressões relacionais.\n\nAnd – Retorna True se todas as condições forem verdadeiras, caso contrário retorna False\nOr – Retorna True se uma das condições for verdadeiras, caso contrário retorna False\nNot - Inverte o resultado: se o resultado da expressão for True, o operador retorna false\n\nExemplo: Operador OR\nidade_lucas = 21\nidade_carolina = 19\nif idade_lucas >= 18 or idade_carolina >= 18:\n    print('Pelo menos um dos dois é maior de idade')\nelse:\n    print('Lucas e Carolina não são maiores de idade')\n\nExemplo: Operador AND\nidade_lucas = 21\nidade_carolina = 19\nif idade_lucas >= 18 and idade_carolina >= 18:\n    print('Lucas e Carolina são maiores de idade')\nelse:\n    print('Pelo menos um dos dois não é maior de idade')",
    "operador_indentidade": "Os operadores de identidade servem para a comparação de objetos. Nessa comparação é verificado se eles ocupam a mesma posição na memória, o que significará que se trata do mesmo objeto.\n\nis - Retorna True se as variáveis comparadas forem o mesmo objeto\nis not - Retorna True se as variáveis comparadas não forem o mesmo objeto\n\nExemplo:\ntime_carlos = 'Botafogo'\ntime_luciano = 'Flamengo'\ntime_fabricia = 'Botafogo'\n\nif time_carlos is time_luciano:\n    print('time_carlos - time_luciano = mesmo objeto')\nelse:\n    print('time_carlos - time_luciano = objetos diferentes')\nif time_carlos is time_fabricia:\n    print('time_carlos - time_fabricia = mesmo objeto')\nelse:\n    print('time_carlos - time_fabricia = objetos diferentes')",
    "operador_aritmetico": "Os operadores aritméticos são utilizados na execução de operações matemáticas, tais como a soma e a subtração, por exemplo\n+ (Adição ou sinal positivo) - Realiza a soma entre operandos - Adiciona o sinal de positivo ao número\n- (Subtração ou sinal negativo) - Realiza a subtração entre operandos - Adiciona o sinal de negativo ao número\n* (Multiplicação) - Realiza a multiplicação entre operandos\n/ (Divisão) - Realiza a divisão entre operandos\n// (Divisão inteira) - Realiza a divisão entre operandos e a parte decimal do resultado\n% (Módulo) - Retorna o resto da divisão entre operandos\n** (Exponenciação) - Retorna um número elevado a potência de outro\n\nExemplos:\nnumero1 = 5\nnumero2 = 2\n\nsoma = numero1 + numero2\nsubtracao = numero1 - numero2\nmultiplicacao = numero1 * numero2\ndivisao = numero1 / numero2\ndivisao_inteira = numero1 // numero2\nmodulo = numero1 % numero2\nexponenciacao = numero1 ** numero2\nprint(soma) # 7\nprint(subtracao) # 3\nprint(multiplicacao)  # 10\nprint(divisao) # 2.5\nprint(divisao_inteira) # 2\nprint(modulo)  # 1\nprint(exponenciacao) # 25",
    "if_ense": "O if é uma estrutura de condição que permite avaliar uma expressão e, de acordo com seu resultado, executar uma determinada ação.\nNo trecho de código a seguir temos um exemplo de uso do if no qual verificamos se a variável idade é menor que 20. Em caso positivo, imprimimos uma mensagem na tela e em caso negativo o código seguirá normalmente, desconsiderando a linha 3.\n\nidade = 18\nif idade < 20:\n    print('Você é jovem!')\n    \nVimos no primeiro exemplo do IF, o qual executa uma ação caso uma determinada condição seja atendida. Porem quando essa condição não é satisfeita, é necessário o uso do Else, que irá redirecionar a resposta da condição principal para o bloco Else. \n\nidade = 18\nif idade >= 18:\n    print('maior de idade')\nelse:\n    print('menor de idade')\n\nCom isso, caso a condição 'maior de idade' não seja atendida, definimos o fluxo alternativo que o código deve seguir. Ou seja, se a idade não for maior ou igual a 18, o bloco abaixo da palavra reservada else deverá ser executado. Nesse caso, seria executa o bloco 'menor de idade'.\n",
    "for_while": "O comando while faz com que um conjunto de instruções seja executado enquanto uma condição é atendida. Quando o resultado dessa condição passa a ser falso, a execução do loop é interrompida\nExemplo:\ncontador = 0\nwhile (contador < 5):\n    print(contador)\n    contador   = contador + 1\n\nO laço for nos permite percorrer os itens de uma coleção e, para cada um deles, executar o bloco de código declarado no loop. Sua sintaxe é a seguinte:\n    for variavel in lista\n    comandos\nEnquanto percorremos a lista de valores, a variável indicada no for receberá, a cada iteração, um item da coleção. Assim, podemos executar algum processamento com esse elemento. No código abaixo percorremos a lista nomes e imprimimos cada elemento.\n    nomes = ['Pedro', 'João', 'Leticia']\n    for n in nomes:\n        print(n)",
    "try_except": "Quando ocorre um erro, ou exceção, o Python normalmente para e gera uma mensagem de erro.\nEssas exceções podem ser tratadas usando a instrução Try afim de que o programa não gere o erro ao usuário e muito menos pare de funcionar.\n    try:\n        print('Olá Mundo!')\n    except:\n        print('Aconteceu algum erro')\nNesse caso, ao inves de gerar um SyntaxError por conta da falta de uma ' no final do print, a exceção será lançada e iŕa retornar ao usuario apenas a mensagem de erro.\n",
    "bem_vindo": "Olá, eu sou o chatbot desenvolvido pelos estudantes da USJT, como vai?\nPosso tirar várias dúvidas sobre python, digita ai as palavras chaves sobre o que você quer aprender ou digite /python para ver as opções :)",
    "idk": "Opa, não consegui entender o que você disse, você pode tentar reescrever com outras palavras?"
}